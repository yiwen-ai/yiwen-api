package api

import (
	"github.com/teambition/gear"

	"github.com/yiwen-ai/yiwen-api/src/bll"
	"github.com/yiwen-ai/yiwen-api/src/middleware"
	"github.com/yiwen-ai/yiwen-api/src/util"
)

type Jarvis struct {
	blls *bll.Blls
}

func (a *Jarvis) ListLanguages(ctx *gear.Context) error {
	output, err := a.blls.Jarvis.ListLanguages(ctx)
	if err != nil {
		return gear.ErrInternalServerError.From(err)
	}
	return ctx.OkSend(bll.SuccessResponse[[][]string]{Result: output})
}

func (a *Jarvis) Search(ctx *gear.Context) error {
	input := &bll.SearchInput{}
	if err := ctx.ParseURL(input); err != nil {
		return err
	}
	output := a.blls.Writing.Search(ctx, input)
	(&output).LoadGroups(func(ids ...util.ID) []bll.GroupInfo {
		return a.blls.Userbase.LoadGroupInfo(ctx, ids...)
	})
	return ctx.OkSend(bll.SuccessResponse[bll.SearchOutput]{Result: output})
}

func (a *Jarvis) GroupSearch(ctx *gear.Context) error {
	input := &bll.SearchInput{}
	if err := ctx.ParseURL(input); err != nil {
		return err
	}

	if input.GID == nil {
		return gear.ErrBadRequest.WithMsg("missing gid")
	}

	sess := gear.CtxValue[middleware.Session](ctx)
	role, err := a.blls.Userbase.UserGroupRole(ctx, sess.UserID, *input.GID)
	if err != nil {
		return gear.ErrForbidden.From(err)
	}
	if role < -1 {
		return gear.ErrForbidden.WithMsg("no permission")
	}

	output := a.blls.Writing.GroupSearch(ctx, input)
	(&output).LoadGroups(func(ids ...util.ID) []bll.GroupInfo {
		return a.blls.Userbase.LoadGroupInfo(ctx, ids...)
	})
	return ctx.OkSend(bll.SuccessResponse[bll.SearchOutput]{Result: output})
}

func (a *Jarvis) OriginalSearch(ctx *gear.Context) error {
	input := &bll.ScrapingInput{}
	if err := ctx.ParseURL(input); err != nil {
		return err
	}

	sess := gear.CtxValue[middleware.Session](ctx)
	role, err := a.blls.Userbase.UserGroupRole(ctx, sess.UserID, input.GID)
	if err != nil {
		return gear.ErrForbidden.From(err)
	}
	if role < -1 {
		return gear.ErrForbidden.WithMsg("no permission")
	}

	scraper, err := a.blls.Webscraper.Search(ctx, input.Url)
	if err != nil {
		return gear.ErrInternalServerError.From(err)
	}

	// a unique Url generated by webscraper from input.Url
	input.Url = scraper.Url
	output := a.blls.Writing.OriginalSearch(ctx, input)
	(&output).LoadGroups(func(ids ...util.ID) []bll.GroupInfo {
		return a.blls.Userbase.LoadGroupInfo(ctx, ids...)
	})
	return ctx.OkSend(bll.SuccessResponse[bll.SearchOutput]{Result: output})
}
